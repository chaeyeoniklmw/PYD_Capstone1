# -*- coding: utf-8 -*-
"""capstone_develop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xxYrOX7O6hLbrhdEzUoc1u3BR0u92p3v

로드맵
1.동대문구 사고다발 구역 pandas 지도 모듈 사용해서 위치 데이터 가공후 나타내기
2.유의미한col들로 insight도출
3.노인보호구역 지정 유력 - 근거찾아서 지정
4.기존 노인보호구역 제외해서
다시 지정
5.시각화
"""

#pandas 불러오기, 데이터확인
import pandas as pd
accident= pd.read_csv('/content/accidentInfo.csv')
accident

#한글폰트조정
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic')

#데이터 분석
#사고건수 컬럼 새로 만들기 (사망자수+중상자수+경상자수+부상신고자수)=사고건수
accident['사고건수']= accident['사망자수']+ accident['중상자수']+accident['경상자수']+ accident['부상신고자수']
accident
#확인결과 각각의 데이터 유형 당 사고건수 1개 존재함을 알 수 있음
#시군구 별로 groupby를 통해 시군구별 사고건수 파악
accident_count=accident.groupby('시군구').agg({'사고건수':'sum'})
#내림차순 정렬
accident_count_sort=accident_count['사고건수'].sort_values(ascending=False)
#top3추출
accident_count_sort.head(3)

import matplotlib
import matplotlib.pyplot as plt
#1.사고건수 별 피해상해정도 분석
accident.groupby('피해운전자 상해정도').agg({'사고건수':'sum'})
damage=accident.groupby('피해운전자 상해정도').agg({'사고건수':'sum'}).plot.bar(rot=0)
plt.xlabel('피해 상해정도')  # x 축 이름 설정
plt.ylabel('사고 건수')      # y 축 이름 설정
plt.rc('axes', labelsize=5)   # x,y축 label 폰트 크기

#2.사고건수 별 도로형태 분석
accident.groupby('도로형태').agg({'사고건수':'sum'})
load=accident.groupby('도로형태').agg({'사고건수':'sum'}).plot.bar(rot=0, color='yellow')
load.tick_params(axis='x', labelsize=6) #x레이블 글자조정
plt.xlabel('도로 형태')  # x 축 이름 설정
plt.ylabel('사고 건수')      # y 축 이름 설정
plt.rc('axes', labelsize=10)   # x,y축 label 폰트 크기

#도로 종류 지정 : 단일로-기타 경로(203)건수가  압도적으로 높음=> 도로유형 고려하여 지정
load=accident.groupby('도로형태').agg({'사고건수':'sum'})
load

#기존 노인보호구역 제외한 새로운 구역을 지정
#보호구역 지정할 지역 설정
#경향성 살펴보기

#사고발생장소(동)- 도로형태 비교 분
first_loc=accident[accident['시군구']=='서울특별시 동대문구 제기동']
first_loc['도로형태'].value_counts()
# 결과출력결과[상위값] :단일로 - 기타: 54


second_loc=accident[accident['시군구']=='서울특별시 동대문구 장안동']
second_loc['도로형태'].value_counts()
# 결과출력결과: 단일로 - 기타: 26

third_loc=accident[accident['시군구']=='서울특별시 동대문구 용두동']
third_loc['도로형태'].value_counts()
# 결과출력결과: 단일로 - 기타: 26

#제기동/ 단일로-기타 출력
safezone_target=first_loc[first_loc['도로형태']=='단일로 - 기타']
#csv파일로 내보내기
#위도경도 추가해서 다시 load
safezone_target.to_excel('제기동 노인보호구역 사고데이터.xlsx')
#위도 경도를 수작업으로 찾아야하므로 다른 데이터 search

#위도경도 있는 데이터의 분석
df= pd.read_csv('/content/동대문구보행노인사고다발.csv')

#제기동 법정동코드 :1123010300
# '법정동코드' 값이 1123010300인 것만 필터링하여 데이터프레임으로 출력
filtered_df = df[df['법정동코드'] == 1123010300]
print(filtered_df)
#사고건수 컬럼 새로 만들기 (사망자수+중상자수+경상자수+부상신고자수)=사고건수
df['사고건수']= df['사망자수']+ df['중상자수']+df['경상자수']+ df['부상신고자수']
df['사고건수']

import folium

# 지도 중심 좌표 설정
map = folium.Map(location=[37.566345, 126.977893], zoom_start=12)  # 서울 중심 좌표

# 주어진 데이터의 위도와 경도를 사용하여 지도에 마커로 표시 (색상 변경)
for idx, row in filtered_df.iterrows():
    popup_text = f"{row['지점명']} - 사고건수: {row['사고건수']}"  # 팝업에 표시될 텍스트 생성
    folium.Marker(
        location=[row['위도'], row['경도']],
        popup=popup_text,
        icon=folium.Icon(color='red', icon='info-sign')  # 마커 색상 및 아이콘 변경 (예시로 빨간색 아이콘)
    ).add_to(map)

# 생성된 지도 보여주기
map

#기존 보호구역 지도시각화
#파일 불러오기
safezone= pd.read_csv('/content/서울특별시_동대문구_노인장애인보호구역_20230828.csv',encoding='cp949')

#사고다발구역 정보와 기존 노인 보호구역 point 합친 시각화
import pandas as pd
import folium

# 데이터를 Pandas DataFrame으로 변환
data = {
    '대상시설명': ['동대문노인종합복지관', '중산경노당', '행복마을경노당', '사)대한노인회', '장평경노당', '경동요양병원', '은천노인종합복지센터', '시립동대문실버케어센터'],
    '위도': [37.58723704, 37.57035699, 37.59000925, 37.57637482, 37.57325201, 37.58294153, 37.570683, 37.575637],
    '경도': [127.0500258, 127.0576174, 127.0387016, 127.0563417, 127.0684601, 127.0437706, 127.0722082, 127.044825]
}

df = pd.DataFrame(data)

# 서울을 중심으로 하는 Folium 지도 생성
m = folium.Map(location=[37.5665, 126.9780], zoom_start=12)

# DataFrame의 각 행을 반복하여 마커 추가
for index, row in df.iterrows():
    folium.Marker([row['위도'], row['경도']], popup=row['대상시설명']).add_to(map)

map

#찾은 위치와 지정된 위치 비교하여 선정